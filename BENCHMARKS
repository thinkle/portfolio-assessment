Step 1: Hello World
- Get GAS-based API set-up (x)
- Get Get web-app authenticated to API * CORS trouble -> maybe JSONP is the solution??? (it is!) (x)
- Get single request made: e.g. list classes for a teacher. (X)
- Test posting data back to GAS api (no-go -- limit of ~5k characters)
  -> Possible model...
     Embed google docs etc. in iFrame for longer data rather than posting data directly. (x)
     
     Other workaround would involve putting data at a secret URL and directing GAS to fetch it, but that
     will expose a substantial security hole and given we're working with student data, seems like a bad plan.

     -> Workaround 2: send data in a series of request rather than all at once -- implemented but definitely shakey (x)

Step 1.a: Google Embed Widget:
- Create a widget for embedding a google doc or a google sheet with data we care about. (x)

Step 1.b: Get basic property saving/getting working (x)

Step 2: Teacher set-up
- Link assessments in (read-mode?) (x)
- Create necessary "database" (spreadsheets?). (sort-of)
- Set up system for spreadsheets + data cached in user's browser
  -> SETTINGS SYSTEM!
     Metadata looks like...

     Settings that can be fetched from google, stored to a spreadsheet, stored to google props, stored in browser localStorage...
     Settings used to associate classes with spreadsheets & portfolios, etc.

     [...
     {
        classId : google-classroom-id
        classTitle : title
        teachers : [email-addresses]
        portfolioDesc : sheet (sheet has two tabs, one for portfolio skills and one for descriptors) (PUBLIC)
        assessments : sheet (PRIVATE)
     } (for each class)
     ]

     Student Work...
     {
     classId : google-classroom-id,
     portfolioDesc : sheet ID (teacher sheet),
     portfolio : sheet ID (student sheet - write access for student and teacher),
     portfolioModTime : last-modification-time of portfolio (used to decide whether to fetch fresh data or not)
     } (for each class)
     

   -> BACKEND WORK!

   next up -- get the backend ready for primetime...
   -> Google Doc Generator functions (to create our "databases") (x)
   -> Create and test file formats for...
      -> Portfolio (x)
      -> Assessments (x)
      


2A:
-> Data types...
    - Class list (list of classes)
    - Skills list
    - Portfolio Editor
      -> Associate skills w/ exemplars (points + due dates) (x)
      -> Weight whole thing... (x)
      -> Get portfolio editor sheet widget working: (x)
             NOTES: Attempts to use various grid table widgets is a f**ing nightmare. Maybe worth just building
             from scratch after all -- state management is the crux of it and it's not being simplified by using
             other people's code :(
      -> Export gradebook assignments...
         -> exportGradebookSheet();
         

~~~ OKAY - SCREW THIS GAS APPROACH

- As we look at pushing student assessment data, etc., the idea of
  chunking info through GAS API calls to handle GET limits seems
  really stupid. Instead, we're moving the whole thing to use the
  google APIs directly from the browser -- no google apps script
  needed.

  => Get sheets api tested (x)
  => Get classroom API tested (x)
  => Get Drive API tested (x)
  => Get "props" system replaced (x)
  => Get DocumentManager replicated in new system (x)
  => Get PortfolioDesc replicated in new system (x)
  => Figure out the "right" way to handle API Keys not being in our repo...(x)
     -- mix of local/remote solutions. API keys will be exposed in HTML but not in Repo.
        Locally we just have a file we don't commit (secrets.js -- on the gitignore).
        Remote/netlify we pull the data in from a lambda function

-> Assignments list...
   -> Associate google classroom assignment with skills.
   

Step 3: Student set-up
- Allow student to link an assignment to a skill / multiple skills.
- Allow teacher to link a student assignment to a skill / multiple skills.


UI Improvements:
- Set up basic animation framework
- Animate basic UI elements